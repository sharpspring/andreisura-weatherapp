{% macro deploy(mem_limit="100Mi", cpu_limit="100m") %}
{% from 'macros/utils.yaml.j2' import secrets_config_env, config_env with context %}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: php
  namespace: {{ namespace }}
  labels:
    role: php
spec:
  replicas: 1
  selector:
    matchLabels:
      role: php
  template:
    metadata:
      labels:
        role: php
    spec:
      containers:
      - name: php
        # diff_id = git rev-parse --abbrev-ref HEAD
        image: us.gcr.io/sharpspring-us/andreisura-weatherapp:{{ diff_id }}
        imagePullPolicy: Always

        env:
        - name: NAMESPACE
          value: {{ namespace }}
        {{ config_env('andreisura-weatherapp-config') | indent(8) }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: andreisura-weatherapp-secrets
              key: db_password

        ports:
        - containerPort: 9000
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: "{{ cpu_limit }}"
            memory: "{{ mem_limit }}"
          limits:
            cpu: "{{ cpu_limit }}"
            memory: "{{ mem_limit }}"
{% if cluster == "staging" %}
      # The following "affinity" and "tolerations" blocks exist to schedule this
      # container onto the "leaky" staging server. The "leaky" server has egress
      # and ingress access to the public Internet. By default we want to
      # restrict things running on the staging cluster to NOT have Internet
      # access. This is because we don't want to accidentally send emails to
      # customers, charge credit cards, etc. If you DO need Internet access, and
      # are willing to assume the risk that that entails, then use this
      # Deployment which has the appropriate affinity and toleration.
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: leaky
                operator: In
                values:
                - "true"
      tolerations:
      - effect: NoSchedule
        key: leaky
        operator: Equal
        value: "true"
{% endif %}

{% endmacro %}
#{% if cluster == "staging" %}
## Give staging smaller resources than production.
#{%- set mem_limit="512Mi" %}
#{%- set cpu_limit="250m" %}
#{% else %}
## Give not-staging (e.g. production) more resources.
#{%- set mem_limit="1Gi" %}
#{%- set cpu_limit="1" %}
#{% endif %}
# We created a macro that will output the above
{{ deploy(mem_limit=mem_limit, cpu_limit=cpu_limit) }}
# vim:ft=ansible:
